function i(t){let e=[t];return{next(){return Promise.resolve({done:e.length===0,value:e.pop()})},return(){return e=[],{}},[Symbol.asyncIterator](){return this}}}function c(t){return t[Symbol.asyncIterator]?t[Symbol.asyncIterator]():t[Symbol.iterator]?t[Symbol.iterator]():t.next?t:i(t)}async function y(t,e){const u=c(t);for(;;){const{value:n,done:o}=await u.next();if(n&&await e(n),o)break}u.return&&u.return()}async function l(t){let e=0;const u=[];await y(t,r=>{u.push(r),e+=r.byteLength});const n=new Uint8Array(e);let o=0;for(const r of u)n.set(r,o),o+=r.byteLength;return n}function d(t){if(t[Symbol.asyncIterator])return t;const e=t.getReader();return{next(){return e.read()},return(){return e.releaseLock(),{}},[Symbol.asyncIterator](){return this}}}async function m({onProgress:t,url:e,method:u="GET",headers:n={},body:o}){o&&(o=await l(o));const r=await fetch(e,{method:u,headers:n,body:o}),a=r.body&&r.body.getReader?d(r.body):[new Uint8Array(await r.arrayBuffer())];n={};for(const[s,f]of r.headers.entries())n[s]=f;return{url:r.url,method:r.method,statusCode:r.status,statusMessage:r.statusText,body:a,headers:n}}var w={request:m};export{w as default,m as request};
